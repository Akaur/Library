Libraries in C++

This library is used to generate DXF file that can be opened in LibreCAD.
Although it is not completed yet but it can generate DXF file for line and circle.

How to download this library
 	1. Open the terminal and type
		$ git clone git://github.com/Akaur/Library.git
	2. Go to this directory.
		$ cd Library

How to use this library

	1. Create a program named example.cpp
	
		// include header files
		#include<iostream> 	
		#include<stdlib.h>
		// include library 'lc.h'
		#include"lc.h"

		using namespace std;
		
		/*		CREATING LINE
		 #  Within a main() function if you want to create a line, then create an 	#
		 #  object of class line like							#
		 #			line l;							#
		 #  then call set(x1,y1,x2,y2) function of class line with four parameters.	#
		 #  	x1-> x-coordinate of first point					#
		 #  	y1-> y-coordinate of first point					#
		 #  	x2-> x-cordinate of second point					#
		 #  	y2-> y-cordinate of second point					#
		 #										#
		 #  Then finally call draw() function to draw a line.				#
		 #  It will create line.dxf file in a same folder.				#
		*/

		

		/*		CREATING CIRCLE
		 #  Within a main() function if you want to create a circle, then create an 	#
		 #   object of class circle like						#
		 #			circle c;						#
		 #  then call set(x1,y1,radius)function of class circle with three parameters.	#
		 #  x1-> x-coordinate of centre point						#
		 #  y1-> y-coordinate of centre point						#
		 #  radius-> radius of a circle							#
		 #										#
		 #  Then finally call draw() function to draw a circle.				#
		 #  It will create circle.dxf file in a same folder.				#
		*/
		    
		int main()
		{
			line l;
			l.set(x1,y1,x2,y2);		// l.set(34,42,15,32);
			l.draw();
			circle c;
			c.set(x1,y1,radius);		// c.set(10,23,15);
			c.draw();
			return 0;
		}



EXECUTION STEPS
Step 1:  Compiling with Position Independent Code

	We need to compile our library source code i.e. "lc.cpp" into position-independent code (PIC):
		$ g++ -c -Wall -Werror -fpic lc.cpp

Step 2: Creating a shared library from an object file

	Now we need to actually turn this object file into a shared library. We’ll call it liblc.so:
		$ g++ -shared -o liblc.so lc.o

Step 3: Linking with a shared library
	Open the terminal and type
	
	$ g++ -L. -Wall -o test example.cpp -llc

		example.cpp -> file that you create.
		test        -> executable filename
		-llc option -> looking for liblc.so

2. Making the library available at runtime
	
	$ echo $LD_LIBRARY_PATH


	There’s nothing in there. Let’s fix that by prepending our working directory to the existing LD_LIBRARY_PATH:

	$ export LD_LIBRARY_PATH=/home/username/Library:$LD_LIBRARY_PATH

3. Now run

	$ ./test

4. Go to library folder and open line.dxf and/or circle.dxf files.

